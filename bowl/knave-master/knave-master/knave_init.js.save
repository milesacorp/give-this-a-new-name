// Knave 1.0.9
// Created by Brandon T. Wood on December 1st, 2013
// Knave is meant to be a combination Incremental Game, combining
//	the best aspects of all to make a fun browser based hybrid people
//	can pour their free time into. 


//GLOBAL VARS, sometime gonna make them all capitalized!
var stage;
var areaBackground;
var map;
var doors;
var outDoor;
var currentArea = [];
var INDEX = 0;
var damage = 1;
var upgrades;
var kills = 0;
var gold = 0;
var ready = 0; // Acts as a Semaphore to the loaded jsons
var char_stamina;
var char;
var monster;
var newLevel = 0;
var char_container;
var upgradeNames;
var Char;


//Calls all the initial methods needed to setup and play the game.
function init(){

	//This needs to be before any PIXI code. Stops Antialiasis
        PIXI.scaleModes.DEFAULT = PIXI.scaleModes.NEAREST;

	//	Loads json and javascript file to load the first area background and monsters. 
	//sets up stage for combat and places all the assets loaded onto the map
	//var ready = 0; // Acts as a Semaphore to the loaded jsons.
	console.log("Calling load!");
	load("monsters.json"); //Has too be called separately on all JSONs
	load("races.json");

	//      Maybe an area object with a background, number of monster 
	// needed to kill and list of monster objects generated inside of it
	// First area must be loaded in before the game loop, every level after
	// that will be loaded upon completion of the current one. 
}



// This load function will load any and all files necessary before the game can run, such as bulk sprites and saved data.
function load(json){

	// Will let us know if we need to create a character before playing.
	var new = false;


	// Sets up character object.
	var temp = document.cookie.split(',');
	// If no cooie initalized.
	//if(temp[0] != ""){
	if(1<0){

		// Load character!
		Char = new char(temp[0], temp[1], temp[2], temp[3], temp[4], temp[5], temp[6]);
		console.log("	Char " + temp +" loaded!");
	}else{
		new = true;
		// Character Creation function called!
		//var temp = createChar();
		//Char = new char('n', 'r', "ge", "go", 'l', 't', 'a');
		//document.cookie = "n,r,ge,go,l,t,a"; //; expires=Thu, 18 Dec 2012 12:00:00 UTC";
		//console.log("	Char " + Char.name + " saved!");
	}
        //This stuff is just needed to setup the canvas and such.
        //stage = new PIXI.Stage(0x50503E);
        //var renderer = PIXI.autoDetectRenderer(1028, 750);
        //document.body.appendChild(renderer.view);

        ready++;
	//Gonna load those sprites as PIXI objects
        var loader = new PIXI.JsonLoader(json);
       	loader.on('loaded', function(evt) {

               	evt.content.json
               	console.log("Load Successful!");
               	ready--;;
		if(ready <= 0 && new == false){

		        stage = new PIXI.Stage(0x50503E);
        		var renderer = PIXI.autoDetectRenderer(1028, 750);
        		document.body.appendChild(renderer.view);
			console.log("Calling setup!");
			setup();
		}else if(ready <= 0 && new == true){

			createChar();
		}
       	});
       	loader.load();
}

function createChar(){

        stage = new PIXI.Stage(0x50503E);
        var renderer = PIXI.autoDetectRenderer(1028, 750);
        document.body.appendChild(renderer.view);
	var array = ["Defaultly", "Human", "M"];
	var done = false;
	
		// Next gotta create toggle button that changes gender.
               	var genderButton = new PIXI.Graphics();
                genderButton.beginFill(0x757585);
                genderButton.lineStyle(5, 0xACACB6, 1);
                genderButton.drawRect(760, 60 + 145, 208, 50);
                genderButton.endFill();
                genderButton.interactive = true;
                genderButton.buttonMode = true;
                //genderButton.tint = 0x999966;
		stage.addChild(genderButton);

		var genderText = new PIXI.Text("M");
                genderText.position.x = 780;
                genderText.position.y = 60 + 165;
                stage.addChild(genderText);

		genderButton.click = genderButton.touchstart = function(e){

			setup();
			if(array[2] == "M"){

				genderText.setText("F"); 
				array[2] = "F";
			}else{

				genderText.setText("M");
				array[2] = "M";
			}
	        };

	//stage.removeChild(genderButton);
	//stage.removeChild(genderText);
	//return array;
}


//This function will construct everything in the game and start the loop when complete.
function setup(){

	// Do we need to go to character creation?
	//if(new){
		//temp = createChar();
		// Char object setup'
	//}

	//This stuff is just needed to setup the canvas and such.
        stage = new PIXI.Stage(0x50503E);
        //var renderer = PIXI.autoDetectRenderer(1028, 750);
        //document.body.appendChild(renderer.view);

	//Setting up upgrades
        upgrades = new upgrade();	
	var upgradeButtons = [];
	upgradeNames = [];
	//Loop for printing purchasable upgrades to attributes.
	for(var i = 0; i < 4; i++){

		//console.log(i);
		upgradeButtons[i] = new PIXI.Graphics();
	        upgradeButtons[i].beginFill(0x757585);
	        upgradeButtons[i].lineStyle(5, 0xACACB6, 1);
                upgradeButtons[i].drawRect(760, 60 * i + 145, 258, 50);
        	upgradeButtons[i].endFill();

                //Tint starts on spawn to let you know you can't open this door yet.
                upgradeButtons[i].interactive = false;
                upgradeButtons[i].buttonMode = false;
		upgradeButtons[i].tint = 0x999966;

		stage.addChild(upgradeButtons[i]);

		upgradeNames[i] = new PIXI.Text(upgrades.attributes[i].name + "     " + upgrades.attributes[i].level + " LVL     " + upgrades.attributes[i].cost + "GP", {font:"bold 15px sans-serif", fill:"yellow", align:"center"});
 	      	upgradeNames[i].position.x = 780;
        	upgradeNames[i].position.y = 60 * i + 165;
		stage.addChild(upgradeNames[i]);		

		//Make into an actual button.
                //upgradeButtons[i].tint = 0xFFFFFF;
                //upgradeButtons[i].interactive = true;
                //\upgradeButtons[i].buttonMode = true;
	};
	upgradeButtons[0].click = upgradeButtons[0].touchstart = function(e){

		//if(gold >= upgrades.attributes[0].cost){
		gold = gold - upgrades.attributes[0].cost;
		upgrades.attributes[0].cost *= 2;
		upgrades.attributes[0].level += 1;
		upgradeNames[0].setText(upgrades.attributes[0].name + "     " + upgrades.attributes[0].level + " LVL     " + upgrades.attributes[0].cost + "GP");
		document.getElementById("demo").innerHTML = gold + " GP";
		//}
	};
        upgradeButtons[1].click = upgradeButtons[1].touchstart = function(e){

                gold = gold - upgrades.attributes[1].cost;
                upgrades.attributes[1].cost *= 2;
                upgrades.attributes[1].level += 1;
                upgradeNames[1].setText(upgrades.attributes[1].name + "     " + upgrades.attributes[1].level + " LVL     " + upgrades.attributes[1].cost + "GP");
                document.getElementById("demo").innerHTML = gold + " GP";
        };
        upgradeButtons[2].click = upgradeButtons[2].touchstart = function(e){

                gold = gold - upgrades.attributes[2].cost;
                upgrades.attributes[2].cost *= 2;
                upgrades.attributes[2].level += 1;
                upgradeNames[2].setText(upgrades.attributes[2].name + "     " + upgrades.attributes[2].level + " LVL     " + upgrades.attributes[2].cost + "GP");
                document.getElementById("demo").innerHTML = gold + " GP";
        };
        upgradeButtons[3].click = upgradeButtons[3].touchstart = function(e){

                gold = gold - upgrades.attributes[3].cost;
                upgrades.attributes[3].cost *= 2;
                upgrades.attributes[3].level += 1;
                upgradeNames[3].setText(upgrades.attributes[3].name + "     " + upgrades.attributes[3].level + " LVL     " + upgrades.attributes[3].cost + "GP");
                document.getElementById("demo").innerHTML = gold + " GP";
        };

//TEMP 
	//Instead I'm just gonna leave the area descriptors inside the file
	map = [{"name":"mistymountain", "type":"forest", "doors":2, "prev":"NULL", "next":"ropebridge"},
		//{"name":"Mountains", "type":"forest", "doors":3, "prev":"Misty_Forest", "next":"Rope_Bridge"},
                {"name":"ropebridge", "type":"forest", "doors":3, "prev":"Mountains", "next":"darkcave"},
                //{"name":"Craven Beach", "type":"forest", "doors":5, "prev":"Rope_Bridge", "next":"Dark_Cave"},
                {"name":"darkcave", "type":"dungeon", "doors":4, "prev":"Craven_Beach", "next":"deepdungeon"},
		{"name":"deepdungeon", "type":"dungeon", "doors":5, "prev":"darkcave", next:"NULL"}
	];
//

	//Setting up doors and level loading.
	console.log("Loading level 1!");
	var currentArea = new area(map[INDEX].name, texture, map[INDEX].type, map[INDEX].doors, map[INDEX].prev, map[INDEX].next);
	doors = [];//["door1", "door2", "door3"];
	var texture = PIXI.Texture.fromImage("res/sign.png");
	//var texture = PIXI.Texture.fromImage("res/chest_closed.png");
	//var texture = PIXI.Texture.fromImage("res/dungeon_door_1.png");
        doorOut = new PIXI.Sprite(texture);
	doorOut.click = doorOut.touchstart = function (e) {

		console.log("Loading level " + INDEX);
		INDEX++;
		currentArea = new area(map[INDEX].name, texture, map[INDEX].type, parseInt(map[INDEX].doors), map[INDEX].prev, map[INDEX].next);
		kills = 0;
		loadLevel();
		console.log("Complete!");
	}
	loadLevel();


        // Next we get to change the background
        var BG = PIXI.Texture.fromImage("res/" + currentArea.name + ".png");
        areaBackground = new PIXI.Sprite(BG);
        areaBackground.position.x = 20;
        areaBackground.position.y = 145;
        areaBackground.scale.y = 8.1;
        areaBackground.scale.x = 9.1;
        stage.addChild(areaBackground);

	// Now Placing everything into a neat little container!
        char_container = new PIXI.DisplayObjectContainer();

        // Here is where the player Character is setup.
        //var texture = PIXI.Texture.fromImage("res/char.png");
	texture = PIXI.Texture.fromImage("Dryad_F.png");
        char = new PIXI.Sprite(texture);
        char.position.x = 50;
        char.position.y = 385;
        char.scale.x = char.scale.y = 6;
	char_container.addChild(char);

	var char_health = 5;
        var health_bar = new PIXI.Graphics();
        health_bar.beginFill(0xCC0000);
        health_bar.lineStyle(8, 0x999966, 1);
        health_bar.drawRect(67,580,(10/100)*800,14)
        char_container.addChild(health_bar);

        char_stamina = 1;
        var critical_bar = new PIXI.Graphics();
        critical_bar.beginFill(0x999966);
        //critical_bar.beginFill(0x0099FF);
//temp  critical_bar.lineStyle(8, 0x999966, 1);
        critical_bar.drawRect(67,600,(10/100)*800,14)
        char_container.addChild(critical_bar);

        var char_name = new PIXI.Text("Name", {font:"bold 25px sans-serif", fill:"pink", align:"center"});
        char_name.position.x = 75;
        char_name.position.y = 365;
        char_container.addChild(char_name);

	stage.addChild(char_container);

	//Starting monster stuff.
	var currentMonster = currentArea.monster;
	currentMonster.getNewMonster();

	//Creating Monster Sprite
	//var monster = PIXI.Sprite.fromFrame(currentMonster.sprite);
        var monster = PIXI.Sprite.fromImage(currentMonster.sprite);
	monster.scale.x = monster.scale.y = 6;
        monster.position.x = 200;
        monster.position.y = 470;

        monster.interactive = true;
        monster.buttonMode = true;

        stage.addChild(monster);

	//Monster Name
	var name = new PIXI.Text(currentMonster.name, {font:"bold 25px sans-serif", fill:"pink", align:"center"});
	name.position.x = 190;
	name.position.y = 440;
	stage.addChild(name);

	//Creating Monster Health Bar
	var health = 5;
        var bar = new PIXI.Graphics();
        bar.beginFill(0xCC0000);
        bar.lineStyle(8, 0x999966, 1);
	bar.drawRect(215,580,(6/100)*800,14)
        stage.addChild(bar);

	var currentHealth = 6;
	var totalHealth = 6;
	var health = 6;
	var areaNum = 0;
	console.log("Setup successful!\nGame Start!");

	//Starting stamina power bar fill and defill
	setInterval(function() { bars() }, 2000)

	update();

	function update(){

		//     Check to see if monster health is equal or less than 0,
		// if so he is dead, if it is the last number of monster 
		// needed to be killed to unlock the next area then load next 
		// area and spit out the gold and load a new one.
                if(currentHealth <= 0){

                        gold += totalHealth;
			kills++;

			currentMonster.getNewMonster();
			console.log("Defeated, " + currentMonster.sprite);
			stage.removeChild(monster);
		        monster = PIXI.Sprite.fromFrame(currentMonster.sprite);

		        monster.scale.x = monster.scale.y = 6;
        		monster.position.x = 200;
        		monster.position.y = 470;
		
        		monster.interactive = true;
        		monster.buttonMode = true;

		        monster.click = monster.touchstart = function (e) {

				//Change click damage.
                		currentHealth = currentHealth - upgrades.damage; //upgrades.getDamage();

                		health--;
               	 		bar.drawRect(215,580,(currentHealth/100)*800, 14);
        		}

			stage.addChild(monster);

			document.getElementById("demo").innerHTML = gold + " GP";

			//Reset Health and health Bar
			totalHealth = currentMonster.health;
			currentHealth = totalHealth; 
			health = totalHealth;

			//bar.drawRect(215,480,(currentHealth/100)*800, 14);
			stage.removeChild(bar);
			bar = new PIXI.Graphics();
        		bar.beginFill(0xCC0000);

        		bar.lineStyle(8, 0x999966, 1);
        		bar.drawRect(215,580,(health/100)*800,14)
			stage.addChild(bar);

			//Change Name
			name.setText(currentMonster.name);

			//Checking to see if reached enough kills to unlock a door.
        		var temp = (kills / 3) - 1;
        		if((temp < parseInt(currentArea.doors)) && ((kills % 3) == 0)){

                		//console.log("Killed enough! " + temp);
                		doors[temp].tint = 0xFFFFFF;
                		doors[temp].interactive = true;
                		doors[temp].buttonMode = true;
        		}else if((temp + 1) > parseInt(currentArea.doors)){

				doorOut.tint = 0xFFFFFF;
                                doorOut.interactive = true;
                                doorOut.buttonMode = true;
			}
		}

		check();
		if(newLevel > 0){

			stage.removeChild(monster);
			stage.addChild(monster);
			stage.removeChild(bar);
			stage.addChild(bar);
			stage.removeChild(name);
			stage.addChild(name);
			stage.removeChild(char_container);
			stage.addChild(char_container);
			newLevel--;
		}
		//bar.drawRect(0, 0,(health/100)*140, 14);
		renderer.render(stage);
		requestAnimFrame(update);
	}


	// Functions for Controls, graphics is the monster hit box and button is the basic upgrades panel WIP.
	//Changed hitbox to be the sprite itself lets see if it works.
	monster.click = monster.touchstart = function (e) {

		currentHealth = currentHealth - upgrades.damage;
	        //currentHealth = currentHealth - upgrades.getDamage();
		health--;
		//console.log(health);
		bar.drawRect(215,580,(currentHealth/100)*800, 14);
	}


	//This function controls the stamina bars regen and roll over
	function bars(){

		var critical_bar = new PIXI.Graphics();
		if(char_stamina < 10){

			char_stamina++;
                	critical_bar.beginFill(0x0099FF);
                	critical_bar.drawRect(67,600,(char_stamina/100)*800,14)
                	char_container.addChild(critical_bar);

		}else{

			//Does a critical hit.
			currentHealth = currentHealth - 10;
	                bar.drawRect(215,580,(currentHealth/100)*800, 14);

			char_stamina = 0;
			
			critical_bar.beginFill(0x999966);
                        critical_bar.drawRect(67,600,(10/100)*800,14)
                        char_container.addChild(critical_bar);
		}
		char_container.addChild(critical_bar);
	};


	// Makes sure that you can buy what you buy.
	function check(){

		for(var i = 0; i < 4; i++){
			if(gold >= parseInt(upgrades.attributes[i].cost)){

				//console.log("You can buy something!");
                                upgradeButtons[i].tint = 0xFFFFFF;
                                upgradeButtons[i].interactive = true;
                                upgradeButtons[i].buttonMode = true;
                        }else{

		                upgradeButtons[i].interactive = false;
		                upgradeButtons[i].buttonMode = false;
		                upgradeButtons[i].tint = 0x999966;		
			}
                }
		
	};


	function loadLevel(){

		newLevel++;
                // Next we get to change the background
                var BG = PIXI.Texture.fromImage("res/" + currentArea.name + ".png");
                //var BG = PIXI.Texture.fromImage("res/.png");
                areaBackground = new PIXI.Sprite(BG);
                areaBackground.position.x = 20;
                areaBackground.position.y = 145;
                areaBackground.scale.y = 8.1;
                areaBackground.scale.x = 9.1;
                stage.addChild(areaBackground);

	        //var char_name = new PIXI.Text("Name", {font:"bold 25px sans-serif", fill:"pink", align:"center"});
	        //char_name.position.x = 75;
	        //char_name.position.y = 365;
	        //char_container.addChild(char_name);

        	//stage.addChild(char_container);		

		var texture;
        	// This entire door loop is a messand needs to be redone cleverly, right now it just floats a sprite over
        	//      the last opened door. All doors should stay open in fial product.
        	for(var i=0; i<currentArea.doors; i++){ // The number of these should be saved into the area and loaded.
		
			//stage.removeChild(doors[i]);
			//stage.addChild(doors[i])
                	//texture = PIXI.Texture.fromImage("res/dungeon_door_1.png");
			texture = PIXI.Texture.fromImage("res/chest_closed.png");
                	doors[i] = new PIXI.Sprite(texture);

                	// create a new Sprite using the texture
                	doors[i] = new PIXI.Sprite(texture);
                	doors[i].position.x = (20 + 130 * i);
                	doors[i].position.y = 20;
                	doors[i].scale.x = doors[i].scale.y = 8.1;

                	//Tint starts on spawn to let you know you can't open this door yet.
                	doors[i].tint = 0x999966;
			doors[i].interactive = false;
	        	doors[i].buttonMode = false;

                	stage.addChild(doors[i]);
                	doors[i].click = doors[i].touchstart = function (e) {
				var door = currentArea.door;
	                       	currentArea.door.openDoor();

        	                //Prints out what type of door is secretly was.
        	                console.log(currentArea.door.currentDoor);

                	        //Hold y position to place on new image.
                	        //var holder = this.position.y;

                        	//Gotta remove before we can add.
                        	stage.removeChild(doors[i]);

                        	//Next we change the image based on what type of door and add affect
                        	if(door.currentDoor == "Treasure"){

                                	//var texture = PIXI.Texture.fromImage("res/dungeon_door_gold.png");
					var texture = PIXI.Texture.fromImage("res/chest_full.png");
                                	// create a new Sprite using the texture
                                	doors[i] = new PIXI.Sprite(texture);
					gold+=30;					
                        	}else if(door.currentDoor == "Trap"){

                        	       	//var texture = PIXI.Texture.fromImage("res/dungeon_door_trap.png");
					var texture = PIXI.Texture.fromImage("res/chest_mimic.png");
                        	       	// create a new Sprite using the texture
                        	       	doors[i] = new PIXI.Sprite(texture);
                        	       	console.log("  (Would take away health!)");
                        	}else if(door.currentDoor == "Monster"){

                                	//var texture = PIXI.Texture.fromImage("res/dungeon_door_empty.png");
                                	// create a new Sprite using the texture
                                	//doors[i] = new PIXI.Sprite(texture);

                                	var texture = PIXI.Texture.fromImage("res/chest_empty.png");
                                	// create a new Sprite using the texture
                                	doors[i] = new PIXI.Sprite(texture);
                                	console.log("  (Would add monster to queue! But is empty..)");
                        	}
                	        doors[i].scale.x = doors[i].scale.y = 8.1;
                	        stage.addChild(doors[i]);
                	        doors[i].position.y = 20;
                	        doors[i].position.x = this.position.x; //(20 + 130 * this.position.x);
                	        this.interactive = false;
                	        doors[i].interactive = false;
                	        document.getElementById("demo").innerHTML = gold + " GP";
                	}
        	};

		//doorOut = [];
		texture = PIXI.Texture.fromImage("res/sign.png");
       	 	doorOut = new PIXI.Sprite(texture);
	        doorOut.position.x = (20 + 130 * i);
	        doorOut.position.y = 20;
	        doorOut.scale.x = doorOut.scale.y = 8.1;

	        //Tint starts on spawn to let you know you can't open this door yet.
	        doorOut.interactive = false;
	        doorOut.buttonMode = false;
	        doorOut.tint = 0x999966;
	        stage.addChild(doorOut);


		doorOut.click = doorOut.touchstart = function (e) {

			INDEX++;
                	console.log("Loading level " + INDEX + ", " + currentArea.name);
                	currentArea = new area(map[INDEX].name, texture, map[INDEX].type, parseInt(map[INDEX].doors), map[INDEX].prev, map[INDEX].next);

                	//Gotta reload all doors and level assets.
                	kills = 0;

                	doorOut.interactive = false;
			doorOut.buttonMode = false;
			loadLevel();
        	}

		// Next we get to change the background
		//stage.removeChild(areaBackground);
        	var BG = PIXI.Texture.fromImage("res/" + currentArea.name + ".png");
        	areaBackground = new PIXI.Sprite(BG);
        	areaBackground.position.x = 20;
        	areaBackground.position.y = 145;
        	areaBackground.scale.y = 8.1;
        	areaBackground.scale.x = 9.1;        	
		stage.addChild(areaBackground);
	};
}
